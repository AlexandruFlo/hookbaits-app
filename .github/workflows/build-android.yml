name: Android Build

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.22.2'

      - name: Create Flutter project
        working-directory: public_html
        run: |
          flutter create mobile_app --org com.hookbaits --project-name hookbaits_shop --platforms=android
          cd mobile_app
          flutter pub add http webview_flutter provider cached_network_image shared_preferences

      - name: Create complete app
        working-directory: public_html/mobile_app
        run: |
          # Main app
          cat > lib/main.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'screens/home_screen.dart';
import 'state/auth_state.dart';
import 'state/cart_state.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => AuthState()),
        ChangeNotifierProvider(create: (context) => CartState()),
      ],
      child: MaterialApp(
        title: 'Hookbaits',
        theme: ThemeData(
          primarySwatch: Colors.blue,
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        home: HomeScreen(),
      ),
    );
  }
}
EOF

          # Auth state
          mkdir -p lib/state
          cat > lib/state/auth_state.dart << 'EOF'
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../config.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class AuthState extends ChangeNotifier {
  bool _isLoggedIn = false;
  String _token = '';
  Map<String, dynamic> _user = {};

  bool get isLoggedIn => _isLoggedIn;
  String get token => _token;
  Map<String, dynamic> get user => _user;

  Future<void> login(String username, String password) async {
    try {
      final response = await http.post(
        Uri.parse('${Config.baseUrl}/wp-json/jwt-auth/v1/token'),
        body: {
          'username': username,
          'password': password,
        },
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        _token = data['token'];
        _user = data['user'];
        _isLoggedIn = true;
        
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('token', _token);
        await prefs.setString('user', json.encode(_user));
        
        notifyListeners();
      }
    } catch (e) {
      print('Login error: $e');
    }
  }

  Future<void> logout() async {
    _isLoggedIn = false;
    _token = '';
    _user = {};
    
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('token');
    await prefs.remove('user');
    
    notifyListeners();
  }

  Future<void> checkAuth() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');
    final userStr = prefs.getString('user');
    
    if (token != null && userStr != null) {
      _token = token;
      _user = json.decode(userStr);
      _isLoggedIn = true;
      notifyListeners();
    }
  }
}
EOF

          # Cart state
          cat > lib/state/cart.dart << 'EOF'
import 'package:flutter/foundation.dart';

class CartState extends ChangeNotifier {
  final List<CartItem> _items = [];
  
  List<CartItem> get items => List.unmodifiable(_items);
  double get total => _items.fold(0, (sum, item) => sum + (item.price * item.quantity));
  
  void addItem(Map<String, dynamic> product) {
    final existingIndex = _items.indexWhere((item) => item.id == product['id']);
    if (existingIndex >= 0) {
      _items[existingIndex].quantity++;
    } else {
      _items.add(CartItem(
        id: product['id'],
        name: product['name'],
        price: double.parse(product['price']),
        image: product['images'][0]['src'],
        quantity: 1,
      ));
    }
    notifyListeners();
  }
  
  void removeItem(int id) {
    _items.removeWhere((item) => item.id == id);
    notifyListeners();
  }
  
  void clearCart() {
    _items.clear();
    notifyListeners();
  }
}

class CartItem {
  final int id;
  final String name;
  final double price;
  final String image;
  int quantity;
  
  CartItem({
    required this.id,
    required this.name,
    required this.price,
    required this.image,
    required this.quantity,
  });
}
EOF

          # Config
          cat > lib/config.dart << 'EOF'
class Config {
  static const String baseUrl = String.fromEnvironment('BASE_URL', defaultValue: 'https://hookbaits.ro');
}
EOF

          # Screens
          mkdir -p lib/screens
          
          # Home screen
          cat > lib/screens/home_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../state/auth_state.dart';
import 'product_list_screen.dart';
import 'login_screen.dart';
import 'cart_screen.dart';
import 'account_screen.dart';

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hookbaits'),
        actions: [
          IconButton(
            icon: Icon(Icons.shopping_cart),
            onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => CartScreen())),
          ),
          Consumer<AuthState>(
            builder: (context, auth, child) {
              if (auth.isLoggedIn) {
                return IconButton(
                  icon: Icon(Icons.person),
                  onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => AccountScreen())),
                );
              } else {
                return IconButton(
                  icon: Icon(Icons.login),
                  onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (context) => LoginScreen())),
                );
              }
            },
          ),
        ],
      ),
      body: ProductListScreen(),
    );
  }
}
EOF

          # Login screen
          cat > lib/screens/login_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../state/auth_state.dart';

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Login')),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextFormField(
                controller: _usernameController,
                decoration: InputDecoration(labelText: 'Username'),
                validator: (value) => value?.isEmpty == true ? 'Required' : null,
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _passwordController,
                decoration: InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) => value?.isEmpty == true ? 'Required' : null,
              ),
              SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _login,
                  child: _isLoading ? CircularProgressIndicator() : Text('Login'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _login() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() => _isLoading = true);
    
    try {
      await context.read<AuthState>().login(
        _usernameController.text,
        _passwordController.text,
      );
      
      if (context.read<AuthState>().isLoggedIn) {
        Navigator.pop(context);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Login failed')),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }
}
EOF

          # Product list screen
          cat > lib/screens/product_list_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'product_screen.dart';
import '../config.dart';

class ProductListScreen extends StatefulWidget {
  @override
  _ProductListScreenState createState() => _ProductListScreenState();
}

class _ProductListScreenState extends State<ProductListScreen> {
  List<dynamic> products = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadProducts();
  }

  Future<void> _loadProducts() async {
    try {
      final response = await http.get(
        Uri.parse('${Config.baseUrl}/wp-json/wc/v3/products'),
      );
      
      if (response.statusCode == 200) {
        setState(() {
          products = json.decode(response.body);
          isLoading = false;
        });
      }
    } catch (e) {
      setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return Center(child: CircularProgressIndicator());
    }
    
    return GridView.builder(
      padding: EdgeInsets.all(16),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 0.75,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: products.length,
      itemBuilder: (context, index) {
        final product = products[index];
        return GestureDetector(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => ProductScreen(product: product),
              ),
            );
          },
          child: Card(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  child: Container(
                    width: double.infinity,
                    child: product['images'].isNotEmpty
                        ? Image.network(
                            product['images'][0]['src'],
                            fit: BoxFit.cover,
                          )
                        : Container(
                            color: Colors.grey[300],
                            child: Icon(Icons.image, size: 50),
                          ),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(8),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        product['name'],
                        style: TextStyle(fontWeight: FontWeight.bold),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      SizedBox(height: 4),
                      Text(
                        '${product['price']} RON',
                        style: TextStyle(
                          color: Colors.blue,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}
EOF

          # Product screen
          cat > lib/screens/product_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../state/cart.dart';
import 'checkout_webview_screen.dart';

class ProductScreen extends StatelessWidget {
  final Map<String, dynamic> product;

  ProductScreen({required this.product});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(product['name'])),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (product['images'].isNotEmpty)
              Container(
                height: 300,
                width: double.infinity,
                child: Image.network(
                  product['images'][0]['src'],
                  fit: BoxFit.cover,
                ),
              ),
            Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    product['name'],
                    style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '${product['price']} RON',
                    style: TextStyle(fontSize: 20, color: Colors.blue, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 16),
                  if (product['description'] != null)
                    Text(product['description']),
                  SizedBox(height: 24),
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        context.read<CartState>().addItem(product);
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('Produs adăugat în coș')),
                        );
                      },
                      child: Padding(
                        padding: EdgeInsets.symmetric(vertical: 16),
                        child: Text('Adaugă în coș', style: TextStyle(fontSize: 18)),
                      ),
                    ),
                  ),
                  SizedBox(height: 12),
                  SizedBox(
                    width: double.infinity,
                    child: OutlinedButton(
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) => CheckoutWebViewScreen()),
                        );
                      },
                      child: Padding(
                        padding: EdgeInsets.symmetric(vertical: 16),
                        child: Text('Finalizează comanda', style: TextStyle(fontSize: 18)),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
EOF

          # Cart screen
          cat > lib/screens/cart_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../state/cart.dart';
import 'checkout_webview_screen.dart';

class CartScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Coșul meu')),
      body: Consumer<CartState>(
        builder: (context, cart, child) {
          if (cart.items.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.shopping_cart_outlined, size: 64, color: Colors.grey),
                  SizedBox(height: 16),
                  Text('Coșul este gol', style: TextStyle(fontSize: 18, color: Colors.grey)),
                ],
              ),
            );
          }

          return Column(
            children: [
              Expanded(
                child: ListView.builder(
                  itemCount: cart.items.length,
                  itemBuilder: (context, index) {
                    final item = cart.items[index];
                    return Card(
                      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      child: ListTile(
                        leading: Container(
                          width: 50,
                          height: 50,
                          child: Image.network(item.image, fit: BoxFit.cover),
                        ),
                        title: Text(item.name),
                        subtitle: Text('${item.price} RON x ${item.quantity}'),
                        trailing: IconButton(
                          icon: Icon(Icons.delete),
                          onPressed: () => cart.removeItem(item.id),
                        ),
                      ),
                    );
                  },
                ),
              ),
              Container(
                padding: EdgeInsets.all(16),
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text('Total:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                        Text('${cart.total.toStringAsFixed(2)} RON', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                      ],
                    ),
                    SizedBox(height: 16),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => CheckoutWebViewScreen()),
                          );
                        },
                        child: Padding(
                          padding: EdgeInsets.symmetric(vertical: 16),
                          child: Text('Finalizează comanda', style: TextStyle(fontSize: 18)),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}
EOF

          # Account screen
          cat > lib/screens/account_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../state/auth_state.dart';

class AccountScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Contul meu')),
      body: Consumer<AuthState>(
        builder: (context, auth, child) {
          return Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              children: [
                Card(
                  child: ListTile(
                    leading: Icon(Icons.person),
                    title: Text('Bună, ${auth.user['display_name'] ?? 'Utilizator'}'),
                    subtitle: Text(auth.user['user_email'] ?? ''),
                  ),
                ),
                SizedBox(height: 16),
                ListTile(
                  leading: Icon(Icons.shopping_bag),
                  title: Text('Comenzile mele'),
                  onTap: () {
                    // Navigate to orders
                  },
                ),
                ListTile(
                  leading: Icon(Icons.favorite),
                  title: Text('Favorite'),
                  onTap: () {
                    // Navigate to favorites
                  },
                ),
                ListTile(
                  leading: Icon(Icons.settings),
                  title: Text('Setări'),
                  onTap: () {
                    // Navigate to settings
                  },
                ),
                Spacer(),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () async {
                      await auth.logout();
                      Navigator.pop(context);
                    },
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                    child: Padding(
                      padding: EdgeInsets.symmetric(vertical: 16),
                      child: Text('Deconectare', style: TextStyle(fontSize: 18)),
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
EOF

          # Checkout webview
          cat > lib/screens/checkout_webview_screen.dart << 'EOF'
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import '../config.dart';

class CheckoutWebViewScreen extends StatefulWidget {
  @override
  _CheckoutWebViewScreenState createState() => _CheckoutWebViewScreenState();
}

class _CheckoutWebViewScreenState extends State<CheckoutWebViewScreen> {
  late WebViewController _controller;
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageFinished: (String url) {
            setState(() => isLoading = false);
          },
        ),
      )
      ..loadRequest(Uri.parse('${Config.baseUrl}/checkout'));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Finalizare comandă')),
      body: Stack(
        children: [
          WebViewWidget(controller: _controller),
          if (isLoading)
            Center(child: CircularProgressIndicator()),
        ],
      ),
    );
  }
}
EOF

      - name: Configure Android
        working-directory: public_html/mobile_app
        run: |
          if [ -f android/app/build.gradle ]; then
            sed -i "s/minSdkVersion [0-9]\+/minSdkVersion 21/" android/app/build.gradle
            sed -i "s/compileSdkVersion [0-9]\+/compileSdkVersion 34/" android/app/build.gradle
            sed -i "s/targetSdkVersion [0-9]\+/targetSdkVersion 34/" android/app/build.gradle
          fi
          sed -i 's/<string name="title">.*<\/string>/<string name="title">Hookbaits<\/string>/' android/app/src/main/res/values/strings.xml

      - name: Build APK
        working-directory: public_html/mobile_app
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
        run: |
          if [ -z "$BASE_URL" ]; then BASE_URL=https://hookbaits.ro; fi
          flutter build apk --release --dart-define=BASE_URL=$BASE_URL

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: hookbaits-apk
          path: public_html/mobile_app/build/app/outputs/**/*.apk
